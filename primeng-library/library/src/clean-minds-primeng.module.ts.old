import { NgModule, ModuleWithProviders, ErrorHandler, Injector, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HTTP_INTERCEPTORS } from '@angular/common/http';

import { Authorization } from './model/authorization';
import { Environment } from './model/environment';

import { AppServiceFactory } from '../x-shared/src/providers/providers.factory';
import { AppService } from '../x-shared/src/providers/app.service';
import { LogService } from '../x-shared/src/providers/log.service';
import { RestApiService } from '../x-shared/src/providers/rest-api.service';
import { HttpInterceptorService } from '../x-shared/src/providers/http-interceptor.service';
import { NavigationGuardService } from './providers/navigation-guard.service';
import { CancellationGuardService } from './providers/cancellation-guard.service';
import { UxService } from './providers/ux.service';
import { Exception } from '../x-shared/src/exceptions/exception';

import { ExceptionHandler } from './providers/exception-handler';

// Ux component imports
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { UxComponent } from './components/ux/ux.component';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { ConfirmationService } from 'primeng/api';
import { GrowlModule } from 'primeng/growl';
import { DialogModule } from 'primeng/dialog';
import { MessagesModule } from 'primeng/messages';
import { MessageModule } from 'primeng/message';
import { BlockUIModule } from 'primeng/blockui';

/**
 * Clean Minds PrimeNg Application Module exports all components of the library for web development
 * exports also all core components from Clean Minds Core Application Module
 */
@NgModule({
  imports: [
    CommonModule,
    BrowserAnimationsModule,
    GrowlModule,
    DialogModule,
    MessagesModule,
    MessageModule,
    BlockUIModule,
    ConfirmDialogModule,
  ],
  declarations: [
    UxComponent
  ],
  exports: [
    UxComponent
  ],
})
export class CleanMindsPrimeNgModule {

  static injector: Injector = undefined;

  // constructor(
  //   injector: Injector
  // ) {
  //   CleanMindsPrimeNgModule.injector = injector;
  // }

  static forRoot(
    environment?: Environment,
    authorization?: Authorization
  ): ModuleWithProviders {

    // validates the enviroment object received
    if (environment) {
      if (!('debug' in environment)
        || !('apiBaseUrl' in environment)
        || !('localization' in environment)) {
        // no LogService, logs directly to console
        console.error(new Date().toISOString() + '\t' + // tslint:disable-line:no-console
          'Invalid Environment object for provider creation.');
        throw new Exception('Invalid Environment object for provider creation.');
      }
    } else {
      // default environment
      environment = <Environment>{
        debug: true,
        apiBaseUrl: 'http://cleandminds/', // dummy URL
        localization: {
          msgInternalError: 'Internal error'
        }
      };
    }

    // validates the authorization object received
    if (authorization) {
      if (!('isAuthenticated' in authorization)
        || !('isAuthorizedRoutePath' in authorization)) {
        // no LogService, logs directly to console
        console.error(new Date().toISOString() + '\t' +  // tslint:disable-line:no-console
          'Invalid Authorization object for provider creation.');
        throw new Exception('Invalid Authorization object for provider creation.');
      }
    } else {
      // default authorization
      authorization =
        <Authorization>{
          isAuthenticated: () => true,
          isAuthorizedRoutePath: (routePath: string) => true,
          info: undefined
        };
    }

    // returns the module
    return {
      ngModule: CleanMindsPrimeNgModule,
      providers: [
        // exported singleton providers
        {
          provide: AppServiceConfig,
          useFactory: AppServiceFactory(environment, authorization, this.injector)
        },
        AppService,
        LogService,
        RestApiService,
        {
          provide: HTTP_INTERCEPTORS,
          useClass: HttpInterceptorService,
          multi: true,
        },
        UxService,
        NavigationGuardService,
        CancellationGuardService,
        {
          provide: ErrorHandler,
          useClass: ExceptionHandler
        },
        ConfirmationService
      ],
    };

  }

}
